import tkinter as tk
from tkinter import messagebox, scrolledtext, Toplevel, Button, Checkbutton, IntVar, Frame
import datetime
import sqlite3
import random
import subprocess

# Database setup
conn = sqlite3.connect('diary.db')
c = conn.cursor()

# Create table if it does not exist
c.execute('''
CREATE TABLE IF NOT EXISTS entries (
    date TEXT,
    time TEXT,
    reflection TEXT,
    activities TEXT
)
''')
conn.commit()

def get_todays_entries():
    today = datetime.date.today().isoformat()
    c.execute('SELECT date, time, reflection, activities FROM entries WHERE date = ?', (today,))
    return c.fetchall()

def get_all_entries():
    c.execute('SELECT date, time, reflection, activities FROM entries ORDER BY date DESC, time DESC')
    return c.fetchall()

def save_entry(reflection_text, activities_text):
    today = datetime.date.today().isoformat()
    current_time = datetime.datetime.now().time().isoformat(timespec='minutes')
    c.execute('INSERT INTO entries (date, time, reflection, activities) VALUES (?, ?, ?, ?)',
              (today, current_time, reflection_text, activities_text))
    conn.commit()

class SpiritualDiary(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Spiritual Reflections Diary")
        self.geometry("500x600")
        self.create_widgets()
        self.load_data()

    def create_widgets(self):
        self.daily_quote = tk.Label(self, text=random.choice([
            "Faith is taking the first step even when you don't see the whole staircase. - Martin Luther King Jr.",
            "Do not let your hearts be troubled. Trust in God; trust also in me. - John 14:1",
            "Be kind, for everyone you meet is fighting a hard battle. - Plato"
        ]), wraplength=480, justify=tk.LEFT)
        self.daily_quote.pack(pady=20)

        self.reflection_label = tk.Label(self, text="Your Reflection:")
        self.reflection_label.pack()

        self.reflection_text = scrolledtext.ScrolledText(self, height=10)
        self.reflection_text.pack()

        self.activities_label = tk.Label(self, text="Today's Spiritual Activities:")
        self.activities_label.pack()

        self.activities_text = scrolledtext.ScrolledText(self, height=5)
        self.activities_text.pack()

        self.save_button = tk.Button(self, text="Save", command=self.save_data)
        self.save_button.pack(pady=10)

        self.view_all_button = tk.Button(self, text="View All Entries", command=self.view_all_entries)
        self.view_all_button.pack(pady=10)

        self.meditation_button = tk.Button(self, text="Volunteer Locally", command=lambda: subprocess.run([ "volunteer.exe"]))
        self.meditation_button.pack(pady=10)

        self.meditation_button = tk.Button(self, text="Launch Meditation Aid", command=lambda: subprocess.run([ "meditate.exe"]))
        self.meditation_button.pack(pady=10)

        self.prayer_button = tk.Button(self, text="Launch Prayer Aid", command=lambda: subprocess.run([ "prayer.exe"]))
        self.prayer_button.pack(pady=10)

    def load_data(self):
        entries = get_todays_entries()
        if entries:
            latest_entry = entries[0]
            self.reflection_text.delete('1.0', tk.END)
            self.reflection_text.insert(tk.END, latest_entry[2])
            self.activities_text.delete('1.0', tk.END)
            self.activities_text.insert(tk.END, latest_entry[3])

    def save_data(self):
        reflection_text = self.reflection_text.get("1.0", tk.END).strip()
        activities_text = self.activities_text.get("1.0", tk.END).strip()
        if reflection_text and activities_text:
            save_entry(reflection_text, activities_text)
            messagebox.showinfo("Saved", "Your reflections and activities have been saved!")
        else:
            messagebox.showinfo("Error", "Please fill in both reflection and activities before saving.")

    def view_all_entries(self):
        entries = get_all_entries()
        self.show_entries(entries)

    def delete_entries(self, entries_to_delete):
        for var, entry in entries_to_delete:
            if var.get() == 1:
                c.execute('DELETE FROM entries WHERE date = ? AND time = ?', (entry[0], entry[1]))
        conn.commit()
        messagebox.showinfo("Deleted", "Selected entries have been successfully deleted!")
        self.view_all_entries()  # Refresh the entries display

    def show_entries(self, entries):
        window = Toplevel(self)
        window.title("All Entries")
        window.geometry("600x400")
        scroll_frame = Frame(window)
        scroll_frame.pack(fill=tk.BOTH, expand=True)
        canvas = tk.Canvas(scroll_frame)
        scrollbar = tk.Scrollbar(scroll_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = Frame(canvas)

        scrollable_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        entries_to_delete = []
        for entry in entries:
            var = IntVar()
            text = tk.Text(scrollable_frame, height=5, wrap=tk.WORD)
            text.insert(tk.END, f"Date: {entry[0]}, Time: {entry[1]}\nReflection:\n{entry[2]}\nActivities:\n{entry[3]}\n")
            text.config(state=tk.DISABLED)
            text.pack(fill=tk.X, expand=True)
            chk = Checkbutton(scrollable_frame, variable=var)
            chk.pack()
            entries_to_delete.append((var, entry))

        delete_button = Button(window, text="Delete Selected", command=lambda: self.delete_entries(entries_to_delete))
        delete_button.pack()

app = SpiritualDiary()
app.mainloop()
